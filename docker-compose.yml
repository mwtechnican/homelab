version: "3.9"
##################################################################
networks:
  dockernet:
    name: "dockernet"
    external: true
  paperlessnet:
    name: "paperlessnet"
  taiganet:
    name: "taiganet"

##################################################################
secrets:
  #----------------------------------------------------#
  IONOS_API_KEY:
    file: "./secrets/ionos_api_key"
  #----------------------------------------------------#
  bitwarden_admin_token:
    file: "./secrets/bitwarden_admin_token"
  bitwarden_smtp_host:
    file: "./secrets/smtp_host"
  bitwarden_smtp_user:
    file: "./secrets/smtp_user"
  bitwarden_smtp_password:
    file: "./secrets/smtp_password"

##################################################################
# taiga
x-environment: &default-back-environment # Database settings
  POSTGRES_DB: ${TAIGA_DB_NAME}
  POSTGRES_USER: ${TAIGA_DB_USER}
  POSTGRES_PASSWORD: ${TAIGA_DB_PASS}
  POSTGRES_HOST: ${TAIGA_DB_HOST}
  # Taiga settings
  TAIGA_SECRET_KEY: ${TAIGA_SECRET_KEY}
  TAIGA_SITES_SCHEME: ${TAIGA_SITES_SCHEME}
  TAIGA_SITES_DOMAIN: ${TAIGA_SITES_DOMAIN}
  TAIGA_SUBPATH: ${TAIGA_SUBPATH} # "" or "/subpath"
  # Email settings. Uncomment following lines and configure your SMTP server
  EMAIL_BACKEND: "django.core.mail.backends.smtp.EmailBackend"
  DEFAULT_FROM_EMAIL: ${TAIGA_DEFAULT_FROM_EMAIL}
  EMAIL_USE_TLS: ${TAIGA_EMAIL_USE_TLS}
  # EMAIL_USE_SSL: "False"
  EMAIL_HOST: ${TAIGA_EMAIL_HOST}
  EMAIL_PORT: ${TAIGA_EMAIL_PORT}
  EMAIL_HOST_USER: ${TAIGA_EMAIL_HOST_USER}
  EMAIL_HOST_PASSWORD: ${TAIGA_EMAIL_HOST_PASSWORD}
  # Rabbitmq settings
  # Should be the same as in taiga-async-rabbitmq and taiga-events-rabbitmq
  RABBITMQ_USER: ${TAIGA_RABBITMQ_USER}
  RABBITMQ_PASS: ${TAIGA_RABBITMQ_PASS}
  # Telemetry settings
  ENABLE_TELEMETRY: "True"
  SESSION_COOKIE_SECURE: "False"
  CSRF_COOKIE_SECURE: "False"
x-volumes: &default-back-volumes
  - ./data/taiga/back/static:/taiga-back/static
  - ./data/taiga/back/media:/taiga-back/media
  # - ./config.py:/taiga-back/settings/config.py
##################################################################
services:
  traefik:
    image: "traefik:latest"
    container_name: "traefik"
    hostname: "traefik"
    restart: "unless-stopped"
    command:
      - "--log.level=Error"
      ### docker provider ###
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.watch=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.network=dockernet"
      ### entrypoints ###
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certResolver=leresolver"
      - "--entrypoints.websecure.http.tls.domains[0].main=${domain}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.${domain}"
      ### certificateresolvers ###
      - "--certificatesresolvers.leresolver.acme.dnschallenge.provider=ionos"
      - "--certificatesresolvers.leresolver.acme.dnschallenge.delaybeforecheck=0"
      - "--certificatesresolvers.leresolver.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53"
      # - "--certificatesresolvers.leresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory" # testing
      - "--certificatesresolvers.leresolver.acme.email=${le_mail}"
      - "--certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.leresolver.acme.keytype=RSA4096"
    environment:
      - "IONOS_API_KEY_FILE=/run/secrets/IONOS_API_KEY"
    secrets:
      - "IONOS_API_KEY"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./data/traefik/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./data/traefik/rules:/rules"
      - "./data/traefik/traefik.log:/traefik.log"
      - "./data/traefik/shared:/shared"
    networks:
      dockernet:
        ipv4_address: 172.18.0.2
    dns:
      - "10.0.0.254"
  portainer:
    image: "portainer/portainer-ce:latest"
    container_name: "portainer"
    hostname: "portainer"
    restart: "unless-stopped"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./data/portainer:/data"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(\"ubudh01.${domain}\")"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.http.routers.portainer.entrypoints=websecure"
    networks:
      dockernet:
        ipv4_address: 172.18.0.3
    dns:
      - "10.0.0.254"
  bitwarden:
    image: "vaultwarden/server:latest"
    container_name: "bitwarden"
    hostname: "bitwarden"
    restart: "unless-stopped"
    volumes:
       - "./data/bitwarden:/data"
    secrets:
      - "bitwarden_admin_token"
      - "bitwarden_smtp_user"
      - "bitwarden_smtp_password"
      - "bitwarden_smtp_host"
    environment:
      - "ADMIN_TOKEN_FILE=/run/secrets/bitwarden_admin_token"
      - "WEBSOCKET_ENABLED=true"
      - "SIGNUPS_ALLOWED=false"
      - "SMTP_HOST_FILE=/run/secrets/bitwarden_smtp_host"
      - "SMTP_FROM=bitwarden@${domain}"
      - "SMTP_PORT=587"
      - "SMTP_SSL=True"
      - "SMTP_USERNAME_FILE=/run/secrets/bitwarden_smtp_user"
      - "SMTP_PASSWORD_FILE=/run/secrets/bitwarden_smtp_password"
      - "DOMAIN=https://bitwarden.${domain}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.bitwarden.loadbalancer.server.port=80"
      - "traefik.http.routers.bitwarden.rule=Host(\"bitwarden.${domain}\")"
      - "traefik.http.routers.bitwarden.entrypoints=websecure"
    networks:
      dockernet:
        ipv4_address: 172.18.0.4
    dns:
      - "10.0.0.254"
  checkmk:
    image: "checkmk/${checkmk_edition}:${checkmk_version}"
    container_name: "checkmk"
    hostname: "checkmk"
    restart: "unless-stopped"
    ports:
      - "6557:6557"
      - "8000:8000"
    tmpfs:
      - "/opt/omd/sites/cmk/tmp:uid=1000,gid=1000"
    volumes:
       - "./data/checkmk:/omd/sites"
       - "/etc/localtime:/etc/localtime:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.checkmk.loadbalancer.server.port=5000"
      - "traefik.http.routers.checkmk.rule=Host(\"checkmk.${domain}\")"
      - "traefik.http.routers.checkmk.entrypoints=websecure"
    networks:
      dockernet:
        ipv4_address: 172.18.0.5
    dns:
      - "10.0.0.254"
  speedtest:
    image: "henrywhitaker3/speedtest-tracker"
    container_name: "speedtest"
    hostname: "speedtest"
    restart: "unless-stopped"
    volumes:
      - "./data/speedtest:/config"
    environment:
      - "TZ=Europe/Berlin"
      - "OOKLA_EULA_GDPR=true"
    logging:
      driver: "json-file"
      options:
        max-file: "10"
        max-size: "200k"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.speedtest.loadbalancer.server.port=80"
      - "traefik.http.routers.speedtest.rule=Host(\"speedtest.${domain}\")"
      - "traefik.http.routers.speedtest.entrypoints=websecure"
    networks:
      dockernet:
        ipv4_address: 172.18.0.6
    dns:
      - "10.0.0.254"
  paperless-broker:
    image: redis:6.0
    container_name: paperless-broker
    hostname: paperless-broker
    restart: unless-stopped
    volumes:
      - ./data/paperless/broker-data:/data
    networks:
      paperlessnet:
    dns:
      - "10.0.0.254"
  paperless-db:
    image: postgres:13
    container_name: paperless-db
    hostname: paperless-db
    restart: unless-stopped
    env_file: 
      - ./env/paperless.env
    volumes:
      - ./data/paperless/db-data:/var/lib/postgresql/data
    networks:
      paperlessnet:
    dns:
      - "10.0.0.254"
  paperless-webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless-webserver
    hostname: paperless-webserver
    restart: unless-stopped
    depends_on:
      - paperless-broker
      - paperless-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    env_file: 
      - ./env/paperless.env
    volumes:
      - ./data/paperless/webserver-data:/usr/src/paperless/data
      - ./data/paperless/webserver-media:/usr/src/paperless/media
      - ./data/paperless/webserver-export:/usr/src/paperless/export
      - ./data/paperless/webserver-consume:/usr/src/paperless/consume
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.paperless-webserver.loadbalancer.server.port=8000"
      - "traefik.http.routers.paperless-webserver.rule=Host(\"paperless.${domain}\")"
      - "traefik.http.routers.paperless-webserver.entrypoints=websecure"
    networks:
      paperlessnet:
      dockernet:
        ipv4_address: 172.18.0.7
    dns:
      - "10.0.0.254"
  plex:
    image: plexinc/pms-docker
    container_name: plex
    hostname: plex
    restart: unless-stopped
    ports:
      - 32400:32400/tcp
      - 3005:3005/tcp
      - 8324:8324/tcp
      - 32469:32469/tcp
      - 1900:1900/udp
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
    environment:
      - TZ=Europe/Berlin
      - PLEX_CLAIM=claim-CcG3GTm7_P-2_yyJdqPJ # short living code
      - ADVERTISE_IP=https://plex.${domain}:443/
    volumes:
      - ./data/plex/config:/config
      - ./data/plex/mnt/seagate-3tb:/data/seagate-3tb
      - ./data/plex/mnt/seagate-8tb:/data/seagate-8tb
      - ./data/plex/transcode:/transcode
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
      - "traefik.http.routers.plex.rule=Host(\"plex.${domain}\")"
      - "traefik.http.routers.plex.entrypoints=websecure"
    networks:
      dockernet:
        ipv4_address: 172.18.0.8
    dns:
      - "10.0.0.254"
  taiga-gateway:
    image: nginx:1.19-alpine
    container_name: taiga-gateway
    hostname: taiga-gateway
    restart: unless-stopped
    # ports:
    #   - "9000:80"
    volumes:
      - ./data/taiga/gw/taiga.conf:/etc/nginx/conf.d/default.conf
      - ./data/taiga/back/static:/taiga/static
      - ./data/taiga/back/media:/taiga/media
    depends_on:
      - taiga-front
      - taiga-back
      - taiga-events
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.taiga.rule=Host(`planner.${domain}`)"
      - "traefik.http.routers.taiga.entryPoints=web"
      - "traefik.http.routers.taiga.middlewares=https_redirect"
      - "traefik.http.middlewares.https_redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.taiga_tls.rule=Host(`planner.${domain}`)"
      - "traefik.http.routers.taiga_tls.entryPoints=websecure"
    networks:
      dockernet:
        ipv4_address: 172.18.0.9
      taiganet:
  taiga-db:
    image: postgres:12.3
    container_name: taiga-db
    hostname: taiga-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${TAIGA_DB_NAME}
      POSTGRES_USER: ${TAIGA_DB_USER}
      POSTGRES_PASSWORD: ${TAIGA_DB_PASS}
    volumes:
      - ./data/taiga/db:/var/lib/postgresql/data
    labels:
      - "traefik.enable=false"
    networks:
      taiganet:
  taiga-back:
    image: taigaio/taiga-back:latest
    container_name: taiga-back
    hostname: taiga-back
    restart: unless-stopped
    environment: *default-back-environment
    volumes: *default-back-volumes
    depends_on:
      - taiga-db
      - taiga-events-rabbitmq
      - taiga-async-rabbitmq
    labels:
      - "traefik.enable=false"
    networks:
      taiganet:
  taiga-async:
    image: taigaio/taiga-back:latest
    container_name: taiga-async
    hostname: taiga-async
    restart: unless-stopped
    entrypoint: ["/taiga-back/docker/async_entrypoint.sh"]
    environment: *default-back-environment
    volumes: *default-back-volumes
    depends_on:
      - taiga-db
      - taiga-back
      - taiga-async-rabbitmq
    labels:
      - "traefik.enable=false"
    networks:
      taiganet:
  taiga-async-rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: taiga-async-rabbitmq
    hostname: taiga-async-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_ERLANG_COOKIE: ${TAIGA_RABBITMQ_ERLANG_COOKIE}
      RABBITMQ_DEFAULT_USER: ${TAIGA_RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${TAIGA_RABBITMQ_PASS}
      RABBITMQ_DEFAULT_VHOST: ${TAIGA_RABBITMQ_VHOST}
    volumes:
      - ./data/taiga/mq/async:/var/lib/rabbitmq
    labels:
      - "traefik.enable=false"
    networks:
      taiganet:
  taiga-front:
    image: taigaio/taiga-front:latest
    container_name: taiga-front
    hostname: taiga-front
    restart: unless-stopped
    environment:
      TAIGA_URL: ${TAIGA_SITES_SCHEME}://${TAIGA_SITES_DOMAIN}
      TAIGA_WEBSOCKETS_URL: wss://${TAIGA_SITES_DOMAIN}
      TAIGA_SUBPATH: ${TAIGA_SUBPATH} # "" or "/subpath"
    labels:
      - "traefik.enable=false"
    # volumes:
    #   - ./conf.json:/usr/share/nginx/html/conf.json
    networks:
      taiganet:
  taiga-events:
    image: taigaio/taiga-events:latest
    container_name: taiga-events
    hostname: taiga-events
    restart: unless-stopped
    environment:
      RABBITMQ_USER: ${TAIGA_RABBITMQ_USER}
      RABBITMQ_PASS: ${TAIGA_RABBITMQ_PASS}
      TAIGA_SECRET_KEY: ${TAIGA_SECRET_KEY}
    depends_on:
      - taiga-events-rabbitmq
    labels:
      - "traefik.enable=false"
    networks:
      taiganet:
  taiga-events-rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: taiga-events-rabbitmq
    hostname: taiga-events-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_ERLANG_COOKIE: ${TAIGA_RABBITMQ_ERLANG_COOKIE}
      RABBITMQ_DEFAULT_USER: ${TAIGA_RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${TAIGA_RABBITMQ_PASS}
      RABBITMQ_DEFAULT_VHOST: ${TAIGA_RABBITMQ_VHOST}
    volumes:
      - ./data/taiga/mq/events:/var/lib/rabbitmq
    labels:
      - "traefik.enable=false"
    networks:
      taiganet:
  taiga-protected:
    image: taigaio/taiga-protected:latest
    container_name: taiga-protected
    hostname: taiga-protected
    restart: unless-stopped
    environment:
      MAX_AGE: 360
      SECRET_KEY: ${TAIGA_SECRET_KEY}
    labels:
      - "traefik.enable=false"
    networks:
      taiganet: